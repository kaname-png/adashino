{
	"compilerOptions": {
		/* Visit https://aka.ms/tsconfig to read more about this file */

		/* Projects */ /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
		"disableReferencedProjectLoad": true /* Reduce the number of projects loaded automatically by TypeScript. */,

		/* Language and Environment */
		"target": "ES2022" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
		"lib": ["ESNext"] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
		"experimentalDecorators": true /* Enable experimental support for TC39 stage 2 draft decorators. */,
		"emitDecoratorMetadata": true /* Emit design-type metadata for decorated declarations in source files. */ /* Control what method is used to detect module-format JS files. */,

		/* Modules */
		"module": "ES2022" /* Specify what module code is generated. */,
		"moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */ /* List of file name suffixes to search when resolving a module. */,
		"resolveJsonModule": true /* Enable importing .json files. */ /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */,

		/* Emit */
		"declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
		"declarationMap": true /* Create sourcemaps for d.ts files. */,
		"sourceMap": true /* Create source map files for emitted JavaScript files. */ /* Disable emitting files from a compilation. */,
		"removeComments": true /* Disable emitting comments. */,
		"importHelpers": true /* Allow importing helper functions from tslib once per project, instead of including them per-file. */,
		"noEmitHelpers": true /* Instead of importing helpers with importHelpers, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions. */,
		"importsNotUsedAsValues": "error" /* Specify emit/checking behavior for imports that are only used for types. */ /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */,
		"newLine": "lf" /* Set the newline character for emitting files. */ /* Disable emitting files if any type checking errors are reported. */,
		"preserveConstEnums": true /* Disable erasing 'const enum' declarations in generated code. */,
		"preserveValueImports": false /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */,

		/* Interop Constraints */ /* Ensure that each file can be safely transpiled without relying on other imports. */
		"allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
		"esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
		// "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
		"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

		/* Type Checking */
		"strict": true /* Enable all strict type-checking options. */,
		"noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statements. Ensures that any non-empty case inside a switch statement includes either break or return. This means you wonâ€™t accidentally ship a case fallthrough bug. */,
		"noImplicitReturns": true /* When enabled, TypeScript will check all code paths in a function to ensure they return a value. */,
		"noUnusedLocals": true /* Report errors on unused local variables. */,
		"noUnusedParameters": true /* Report errors on unused parameters in functions. */,

		/* Completeness */
		"skipLibCheck": true /* Skip type checking all .d.ts files. */
	},
	"include": []
}
